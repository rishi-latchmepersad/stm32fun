
f767zi_led_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000061c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000814  0800081c  0000181c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000814  08000814  0000181c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000814  08000814  0000181c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000814  0800081c  0000181c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000814  08000814  00001814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000818  08000818  00001818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000181c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800081c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800081c  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012aa  00000000  00000000  0000184a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004ed  00000000  00000000  00002af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e0  00000000  00000000  00002fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000097  00000000  00000000  000030c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c3b  00000000  00000000  0000315f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b18  00000000  00000000  00026d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6575  00000000  00000000  000288b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ee27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000026c  00000000  00000000  0010ee6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0010f0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	080007fc 	.word	0x080007fc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	080007fc 	.word	0x080007fc

08000238 <main>:
 */

#include "main.h"


int main(void){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	// set up the GPIO B pins
	GPIOB_Config();
 800023c:	f000 f81e 	bl	800027c <GPIOB_Config>
	// set up the GPIO C pins
	GPIOC_Config();
 8000240:	f000 f844 	bl	80002cc <GPIOC_Config>
	// run an infinite loop
	while(1){
		// let's use led 2, which is connected to PB7
		// and use the user pushbutton b1, connected to pc13
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 1){
 8000244:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000248:	4809      	ldr	r0, [pc, #36]	@ (8000270 <main+0x38>)
 800024a:	f000 fa67 	bl	800071c <HAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	2b01      	cmp	r3, #1
 8000252:	d107      	bne.n	8000264 <main+0x2c>
			// toggle the led
			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8000254:	2180      	movs	r1, #128	@ 0x80
 8000256:	4807      	ldr	r0, [pc, #28]	@ (8000274 <main+0x3c>)
 8000258:	f000 fa91 	bl	800077e <HAL_GPIO_TogglePin>
			//delay the led to allow for a 'blink'
			delay(500000);
 800025c:	4806      	ldr	r0, [pc, #24]	@ (8000278 <main+0x40>)
 800025e:	f000 f85f 	bl	8000320 <delay>
 8000262:	e7ef      	b.n	8000244 <main+0xc>
		}
		else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2180      	movs	r1, #128	@ 0x80
 8000268:	4802      	ldr	r0, [pc, #8]	@ (8000274 <main+0x3c>)
 800026a:	f000 fa6f 	bl	800074c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 1){
 800026e:	e7e9      	b.n	8000244 <main+0xc>
 8000270:	40020800 	.word	0x40020800
 8000274:	40020400 	.word	0x40020400
 8000278:	0007a120 	.word	0x0007a120

0800027c <GPIOB_Config>:
		}
	}
}

// GPIOB configuration for LED 2
void GPIOB_Config(void){
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
	// enable the clock to bring the GPIO B connectors up from their low power default state
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000282:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <GPIOB_Config+0x48>)
 8000284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000286:	4a0f      	ldr	r2, [pc, #60]	@ (80002c4 <GPIOB_Config+0x48>)
 8000288:	f043 0302 	orr.w	r3, r3, #2
 800028c:	6313      	str	r3, [r2, #48]	@ 0x30
 800028e:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <GPIOB_Config+0x48>)
 8000290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000292:	f003 0302 	and.w	r3, r3, #2
 8000296:	603b      	str	r3, [r7, #0]
 8000298:	683b      	ldr	r3, [r7, #0]
	// initialize a struct to hold all the values for our GPIO device
	GPIO_InitTypeDef GPIOB_Init= {};
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]
 80002a2:	609a      	str	r2, [r3, #8]
 80002a4:	60da      	str	r2, [r3, #12]
 80002a6:	611a      	str	r2, [r3, #16]
	// set the pin to 7, since that's where our LED2 is connected
	GPIOB_Init.Pin = GPIO_PIN_7;
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	607b      	str	r3, [r7, #4]
	// set the pin to the output push-pull mode
	GPIOB_Init.Mode = GPIO_MODE_OUTPUT_PP;
 80002ac:	2301      	movs	r3, #1
 80002ae:	60bb      	str	r3, [r7, #8]
	// call the initialization function with this struct for GPIO B
	HAL_GPIO_Init(GPIOB, &GPIOB_Init);
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	4619      	mov	r1, r3
 80002b4:	4804      	ldr	r0, [pc, #16]	@ (80002c8 <GPIOB_Config+0x4c>)
 80002b6:	f000 f885 	bl	80003c4 <HAL_GPIO_Init>
}
 80002ba:	bf00      	nop
 80002bc:	3718      	adds	r7, #24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020400 	.word	0x40020400

080002cc <GPIOC_Config>:

// GPIOB configuration for B1
void GPIOC_Config(void){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
	// enable the clock to bring the GPIO C connectors up from their low power default state
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002d2:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <GPIOC_Config+0x4c>)
 80002d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d6:	4a10      	ldr	r2, [pc, #64]	@ (8000318 <GPIOC_Config+0x4c>)
 80002d8:	f043 0304 	orr.w	r3, r3, #4
 80002dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80002de:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <GPIOC_Config+0x4c>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e2:	f003 0304 	and.w	r3, r3, #4
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	683b      	ldr	r3, [r7, #0]
	// initialize a struct to hold all the values for our GPIO device
	GPIO_InitTypeDef GPIOC_Init= {};
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
	// set the pin to 13, since that's where our user button B1 is connected
	GPIOC_Init.Pin = GPIO_PIN_13;
 80002f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002fc:	607b      	str	r3, [r7, #4]
	// set the pin to the input mode
	GPIOC_Init.Mode = GPIO_MODE_INPUT;
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
	// the button already has the hardware for pull up, so we need no pull in software
	GPIOC_Init.Pull = GPIO_NOPULL;
 8000302:	2300      	movs	r3, #0
 8000304:	60fb      	str	r3, [r7, #12]
	// call the initialization function with this struct for GPIO C
	HAL_GPIO_Init(GPIOC, &GPIOC_Init);
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4619      	mov	r1, r3
 800030a:	4804      	ldr	r0, [pc, #16]	@ (800031c <GPIOC_Config+0x50>)
 800030c:	f000 f85a 	bl	80003c4 <HAL_GPIO_Init>
}
 8000310:	bf00      	nop
 8000312:	3718      	adds	r7, #24
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40023800 	.word	0x40023800
 800031c:	40020800 	.word	0x40020800

08000320 <delay>:


void delay(uint32_t delayVal){
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0;i<delayVal;i++){
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	e002      	b.n	8000334 <delay+0x14>
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3301      	adds	r3, #1
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fa      	ldr	r2, [r7, #12]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	429a      	cmp	r2, r3
 800033a:	d3f8      	bcc.n	800032e <delay+0xe>

	}
}
 800033c:	bf00      	nop
 800033e:	bf00      	nop
 8000340:	3714      	adds	r7, #20
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
	...

0800034c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000350:	4b06      	ldr	r3, [pc, #24]	@ (800036c <SystemInit+0x20>)
 8000352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000356:	4a05      	ldr	r2, [pc, #20]	@ (800036c <SystemInit+0x20>)
 8000358:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800035c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000370:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000374:	f7ff ffea 	bl	800034c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000378:	480c      	ldr	r0, [pc, #48]	@ (80003ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800037a:	490d      	ldr	r1, [pc, #52]	@ (80003b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800037c:	4a0d      	ldr	r2, [pc, #52]	@ (80003b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038e:	4a0a      	ldr	r2, [pc, #40]	@ (80003b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000390:	4c0a      	ldr	r4, [pc, #40]	@ (80003bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800039e:	f000 fa09 	bl	80007b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003a2:	f7ff ff49 	bl	8000238 <main>
  bx  lr    
 80003a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003a8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b4:	0800081c 	.word	0x0800081c
  ldr r2, =_sbss
 80003b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003bc:	2000001c 	.word	0x2000001c

080003c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC_IRQHandler>
	...

080003c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b089      	sub	sp, #36	@ 0x24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80003d6:	2300      	movs	r3, #0
 80003d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80003da:	2300      	movs	r3, #0
 80003dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80003de:	2300      	movs	r3, #0
 80003e0:	61fb      	str	r3, [r7, #28]
 80003e2:	e175      	b.n	80006d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80003e4:	2201      	movs	r2, #1
 80003e6:	69fb      	ldr	r3, [r7, #28]
 80003e8:	fa02 f303 	lsl.w	r3, r2, r3
 80003ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	697a      	ldr	r2, [r7, #20]
 80003f4:	4013      	ands	r3, r2
 80003f6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80003f8:	693a      	ldr	r2, [r7, #16]
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	f040 8164 	bne.w	80006ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	f003 0303 	and.w	r3, r3, #3
 800040a:	2b01      	cmp	r3, #1
 800040c:	d005      	beq.n	800041a <HAL_GPIO_Init+0x56>
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	f003 0303 	and.w	r3, r3, #3
 8000416:	2b02      	cmp	r3, #2
 8000418:	d130      	bne.n	800047c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000420:	69fb      	ldr	r3, [r7, #28]
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	2203      	movs	r2, #3
 8000426:	fa02 f303 	lsl.w	r3, r2, r3
 800042a:	43db      	mvns	r3, r3
 800042c:	69ba      	ldr	r2, [r7, #24]
 800042e:	4013      	ands	r3, r2
 8000430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	68da      	ldr	r2, [r3, #12]
 8000436:	69fb      	ldr	r3, [r7, #28]
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	fa02 f303 	lsl.w	r3, r2, r3
 800043e:	69ba      	ldr	r2, [r7, #24]
 8000440:	4313      	orrs	r3, r2
 8000442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	69ba      	ldr	r2, [r7, #24]
 8000448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000450:	2201      	movs	r2, #1
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	fa02 f303 	lsl.w	r3, r2, r3
 8000458:	43db      	mvns	r3, r3
 800045a:	69ba      	ldr	r2, [r7, #24]
 800045c:	4013      	ands	r3, r2
 800045e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	091b      	lsrs	r3, r3, #4
 8000466:	f003 0201 	and.w	r2, r3, #1
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	fa02 f303 	lsl.w	r3, r2, r3
 8000470:	69ba      	ldr	r2, [r7, #24]
 8000472:	4313      	orrs	r3, r2
 8000474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	69ba      	ldr	r2, [r7, #24]
 800047a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	f003 0303 	and.w	r3, r3, #3
 8000484:	2b03      	cmp	r3, #3
 8000486:	d017      	beq.n	80004b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	2203      	movs	r2, #3
 8000494:	fa02 f303 	lsl.w	r3, r2, r3
 8000498:	43db      	mvns	r3, r3
 800049a:	69ba      	ldr	r2, [r7, #24]
 800049c:	4013      	ands	r3, r2
 800049e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	689a      	ldr	r2, [r3, #8]
 80004a4:	69fb      	ldr	r3, [r7, #28]
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ac:	69ba      	ldr	r2, [r7, #24]
 80004ae:	4313      	orrs	r3, r2
 80004b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	69ba      	ldr	r2, [r7, #24]
 80004b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	f003 0303 	and.w	r3, r3, #3
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d123      	bne.n	800050c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80004c4:	69fb      	ldr	r3, [r7, #28]
 80004c6:	08da      	lsrs	r2, r3, #3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3208      	adds	r2, #8
 80004cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80004d2:	69fb      	ldr	r3, [r7, #28]
 80004d4:	f003 0307 	and.w	r3, r3, #7
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	220f      	movs	r2, #15
 80004dc:	fa02 f303 	lsl.w	r3, r2, r3
 80004e0:	43db      	mvns	r3, r3
 80004e2:	69ba      	ldr	r2, [r7, #24]
 80004e4:	4013      	ands	r3, r2
 80004e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	691a      	ldr	r2, [r3, #16]
 80004ec:	69fb      	ldr	r3, [r7, #28]
 80004ee:	f003 0307 	and.w	r3, r3, #7
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	fa02 f303 	lsl.w	r3, r2, r3
 80004f8:	69ba      	ldr	r2, [r7, #24]
 80004fa:	4313      	orrs	r3, r2
 80004fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80004fe:	69fb      	ldr	r3, [r7, #28]
 8000500:	08da      	lsrs	r2, r3, #3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	3208      	adds	r2, #8
 8000506:	69b9      	ldr	r1, [r7, #24]
 8000508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	2203      	movs	r2, #3
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	43db      	mvns	r3, r3
 800051e:	69ba      	ldr	r2, [r7, #24]
 8000520:	4013      	ands	r3, r2
 8000522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	f003 0203 	and.w	r2, r3, #3
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	fa02 f303 	lsl.w	r3, r2, r3
 8000534:	69ba      	ldr	r2, [r7, #24]
 8000536:	4313      	orrs	r3, r2
 8000538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	69ba      	ldr	r2, [r7, #24]
 800053e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000548:	2b00      	cmp	r3, #0
 800054a:	f000 80be 	beq.w	80006ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054e:	4b66      	ldr	r3, [pc, #408]	@ (80006e8 <HAL_GPIO_Init+0x324>)
 8000550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000552:	4a65      	ldr	r2, [pc, #404]	@ (80006e8 <HAL_GPIO_Init+0x324>)
 8000554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000558:	6453      	str	r3, [r2, #68]	@ 0x44
 800055a:	4b63      	ldr	r3, [pc, #396]	@ (80006e8 <HAL_GPIO_Init+0x324>)
 800055c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800055e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000566:	4a61      	ldr	r2, [pc, #388]	@ (80006ec <HAL_GPIO_Init+0x328>)
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	089b      	lsrs	r3, r3, #2
 800056c:	3302      	adds	r3, #2
 800056e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000572:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000574:	69fb      	ldr	r3, [r7, #28]
 8000576:	f003 0303 	and.w	r3, r3, #3
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	220f      	movs	r2, #15
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	69ba      	ldr	r2, [r7, #24]
 8000586:	4013      	ands	r3, r2
 8000588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a58      	ldr	r2, [pc, #352]	@ (80006f0 <HAL_GPIO_Init+0x32c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d037      	beq.n	8000602 <HAL_GPIO_Init+0x23e>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a57      	ldr	r2, [pc, #348]	@ (80006f4 <HAL_GPIO_Init+0x330>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d031      	beq.n	80005fe <HAL_GPIO_Init+0x23a>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a56      	ldr	r2, [pc, #344]	@ (80006f8 <HAL_GPIO_Init+0x334>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d02b      	beq.n	80005fa <HAL_GPIO_Init+0x236>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a55      	ldr	r2, [pc, #340]	@ (80006fc <HAL_GPIO_Init+0x338>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d025      	beq.n	80005f6 <HAL_GPIO_Init+0x232>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a54      	ldr	r2, [pc, #336]	@ (8000700 <HAL_GPIO_Init+0x33c>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d01f      	beq.n	80005f2 <HAL_GPIO_Init+0x22e>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a53      	ldr	r2, [pc, #332]	@ (8000704 <HAL_GPIO_Init+0x340>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d019      	beq.n	80005ee <HAL_GPIO_Init+0x22a>
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a52      	ldr	r2, [pc, #328]	@ (8000708 <HAL_GPIO_Init+0x344>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d013      	beq.n	80005ea <HAL_GPIO_Init+0x226>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a51      	ldr	r2, [pc, #324]	@ (800070c <HAL_GPIO_Init+0x348>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d00d      	beq.n	80005e6 <HAL_GPIO_Init+0x222>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a50      	ldr	r2, [pc, #320]	@ (8000710 <HAL_GPIO_Init+0x34c>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d007      	beq.n	80005e2 <HAL_GPIO_Init+0x21e>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a4f      	ldr	r2, [pc, #316]	@ (8000714 <HAL_GPIO_Init+0x350>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d101      	bne.n	80005de <HAL_GPIO_Init+0x21a>
 80005da:	2309      	movs	r3, #9
 80005dc:	e012      	b.n	8000604 <HAL_GPIO_Init+0x240>
 80005de:	230a      	movs	r3, #10
 80005e0:	e010      	b.n	8000604 <HAL_GPIO_Init+0x240>
 80005e2:	2308      	movs	r3, #8
 80005e4:	e00e      	b.n	8000604 <HAL_GPIO_Init+0x240>
 80005e6:	2307      	movs	r3, #7
 80005e8:	e00c      	b.n	8000604 <HAL_GPIO_Init+0x240>
 80005ea:	2306      	movs	r3, #6
 80005ec:	e00a      	b.n	8000604 <HAL_GPIO_Init+0x240>
 80005ee:	2305      	movs	r3, #5
 80005f0:	e008      	b.n	8000604 <HAL_GPIO_Init+0x240>
 80005f2:	2304      	movs	r3, #4
 80005f4:	e006      	b.n	8000604 <HAL_GPIO_Init+0x240>
 80005f6:	2303      	movs	r3, #3
 80005f8:	e004      	b.n	8000604 <HAL_GPIO_Init+0x240>
 80005fa:	2302      	movs	r3, #2
 80005fc:	e002      	b.n	8000604 <HAL_GPIO_Init+0x240>
 80005fe:	2301      	movs	r3, #1
 8000600:	e000      	b.n	8000604 <HAL_GPIO_Init+0x240>
 8000602:	2300      	movs	r3, #0
 8000604:	69fa      	ldr	r2, [r7, #28]
 8000606:	f002 0203 	and.w	r2, r2, #3
 800060a:	0092      	lsls	r2, r2, #2
 800060c:	4093      	lsls	r3, r2
 800060e:	69ba      	ldr	r2, [r7, #24]
 8000610:	4313      	orrs	r3, r2
 8000612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000614:	4935      	ldr	r1, [pc, #212]	@ (80006ec <HAL_GPIO_Init+0x328>)
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	089b      	lsrs	r3, r3, #2
 800061a:	3302      	adds	r3, #2
 800061c:	69ba      	ldr	r2, [r7, #24]
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000622:	4b3d      	ldr	r3, [pc, #244]	@ (8000718 <HAL_GPIO_Init+0x354>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	43db      	mvns	r3, r3
 800062c:	69ba      	ldr	r2, [r7, #24]
 800062e:	4013      	ands	r3, r2
 8000630:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800063a:	2b00      	cmp	r3, #0
 800063c:	d003      	beq.n	8000646 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800063e:	69ba      	ldr	r2, [r7, #24]
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	4313      	orrs	r3, r2
 8000644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000646:	4a34      	ldr	r2, [pc, #208]	@ (8000718 <HAL_GPIO_Init+0x354>)
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800064c:	4b32      	ldr	r3, [pc, #200]	@ (8000718 <HAL_GPIO_Init+0x354>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	43db      	mvns	r3, r3
 8000656:	69ba      	ldr	r2, [r7, #24]
 8000658:	4013      	ands	r3, r2
 800065a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000668:	69ba      	ldr	r2, [r7, #24]
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	4313      	orrs	r3, r2
 800066e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000670:	4a29      	ldr	r2, [pc, #164]	@ (8000718 <HAL_GPIO_Init+0x354>)
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000676:	4b28      	ldr	r3, [pc, #160]	@ (8000718 <HAL_GPIO_Init+0x354>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	43db      	mvns	r3, r3
 8000680:	69ba      	ldr	r2, [r7, #24]
 8000682:	4013      	ands	r3, r2
 8000684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800068e:	2b00      	cmp	r3, #0
 8000690:	d003      	beq.n	800069a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000692:	69ba      	ldr	r2, [r7, #24]
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	4313      	orrs	r3, r2
 8000698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800069a:	4a1f      	ldr	r2, [pc, #124]	@ (8000718 <HAL_GPIO_Init+0x354>)
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <HAL_GPIO_Init+0x354>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	43db      	mvns	r3, r3
 80006aa:	69ba      	ldr	r2, [r7, #24]
 80006ac:	4013      	ands	r3, r2
 80006ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d003      	beq.n	80006c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80006bc:	69ba      	ldr	r2, [r7, #24]
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80006c4:	4a14      	ldr	r2, [pc, #80]	@ (8000718 <HAL_GPIO_Init+0x354>)
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3301      	adds	r3, #1
 80006ce:	61fb      	str	r3, [r7, #28]
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	2b0f      	cmp	r3, #15
 80006d4:	f67f ae86 	bls.w	80003e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3724      	adds	r7, #36	@ 0x24
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40013800 	.word	0x40013800
 80006f0:	40020000 	.word	0x40020000
 80006f4:	40020400 	.word	0x40020400
 80006f8:	40020800 	.word	0x40020800
 80006fc:	40020c00 	.word	0x40020c00
 8000700:	40021000 	.word	0x40021000
 8000704:	40021400 	.word	0x40021400
 8000708:	40021800 	.word	0x40021800
 800070c:	40021c00 	.word	0x40021c00
 8000710:	40022000 	.word	0x40022000
 8000714:	40022400 	.word	0x40022400
 8000718:	40013c00 	.word	0x40013c00

0800071c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691a      	ldr	r2, [r3, #16]
 800072c:	887b      	ldrh	r3, [r7, #2]
 800072e:	4013      	ands	r3, r2
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000734:	2301      	movs	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
 8000738:	e001      	b.n	800073e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800073e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	807b      	strh	r3, [r7, #2]
 8000758:	4613      	mov	r3, r2
 800075a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800075c:	787b      	ldrb	r3, [r7, #1]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d003      	beq.n	800076a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000762:	887a      	ldrh	r2, [r7, #2]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000768:	e003      	b.n	8000772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800076a:	887b      	ldrh	r3, [r7, #2]
 800076c:	041a      	lsls	r2, r3, #16
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	619a      	str	r2, [r3, #24]
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800077e:	b480      	push	{r7}
 8000780:	b085      	sub	sp, #20
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	460b      	mov	r3, r1
 8000788:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000790:	887a      	ldrh	r2, [r7, #2]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	4013      	ands	r3, r2
 8000796:	041a      	lsls	r2, r3, #16
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	43d9      	mvns	r1, r3
 800079c:	887b      	ldrh	r3, [r7, #2]
 800079e:	400b      	ands	r3, r1
 80007a0:	431a      	orrs	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	619a      	str	r2, [r3, #24]
}
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <__libc_init_array>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	4d0d      	ldr	r5, [pc, #52]	@ (80007ec <__libc_init_array+0x38>)
 80007b8:	4c0d      	ldr	r4, [pc, #52]	@ (80007f0 <__libc_init_array+0x3c>)
 80007ba:	1b64      	subs	r4, r4, r5
 80007bc:	10a4      	asrs	r4, r4, #2
 80007be:	2600      	movs	r6, #0
 80007c0:	42a6      	cmp	r6, r4
 80007c2:	d109      	bne.n	80007d8 <__libc_init_array+0x24>
 80007c4:	4d0b      	ldr	r5, [pc, #44]	@ (80007f4 <__libc_init_array+0x40>)
 80007c6:	4c0c      	ldr	r4, [pc, #48]	@ (80007f8 <__libc_init_array+0x44>)
 80007c8:	f000 f818 	bl	80007fc <_init>
 80007cc:	1b64      	subs	r4, r4, r5
 80007ce:	10a4      	asrs	r4, r4, #2
 80007d0:	2600      	movs	r6, #0
 80007d2:	42a6      	cmp	r6, r4
 80007d4:	d105      	bne.n	80007e2 <__libc_init_array+0x2e>
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007dc:	4798      	blx	r3
 80007de:	3601      	adds	r6, #1
 80007e0:	e7ee      	b.n	80007c0 <__libc_init_array+0xc>
 80007e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e6:	4798      	blx	r3
 80007e8:	3601      	adds	r6, #1
 80007ea:	e7f2      	b.n	80007d2 <__libc_init_array+0x1e>
 80007ec:	08000814 	.word	0x08000814
 80007f0:	08000814 	.word	0x08000814
 80007f4:	08000814 	.word	0x08000814
 80007f8:	08000818 	.word	0x08000818

080007fc <_init>:
 80007fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fe:	bf00      	nop
 8000800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000802:	bc08      	pop	{r3}
 8000804:	469e      	mov	lr, r3
 8000806:	4770      	bx	lr

08000808 <_fini>:
 8000808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800080a:	bf00      	nop
 800080c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800080e:	bc08      	pop	{r3}
 8000810:	469e      	mov	lr, r3
 8000812:	4770      	bx	lr
