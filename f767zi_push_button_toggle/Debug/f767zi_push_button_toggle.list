
f767zi_push_button_toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005cc  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007c4  080007cc  000017cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007c4  080007c4  000017cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080007c4  080007c4  000017cc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080007c4  080007cc  000017cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007c4  080007c4  000017c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007c8  080007c8  000017c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000017cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080007cc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080007cc  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012a9  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004ef  00000000  00000000  00002aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000e0  00000000  00000000  00002f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000097  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c66  00000000  00000000  0000310f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b3e  00000000  00000000  00026d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e65f5  00000000  00000000  000288b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010eea8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000270  00000000  00000000  0010eeec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0010f15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	080007ac 	.word	0x080007ac

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	080007ac 	.word	0x080007ac

08000238 <main>:

#include "main.h"
#include "stdbool.h"


int main(void){
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	// set up the GPIO B pins
	GPIOB_Config();
 800023e:	f000 f825 	bl	800028c <GPIOB_Config>
	// set up the GPIO C pins
	GPIOC_Config();
 8000242:	f000 f84b 	bl	80002dc <GPIOC_Config>
	// create a variable to store the state of the button press
	bool flag = true;
 8000246:	2301      	movs	r3, #1
 8000248:	71fb      	strb	r3, [r7, #7]
	// run an infinite loop
	while(1){
		// let's use led 2, which is connected to PB7
		// and use the user pushbutton b1, connected to pc13
		// if the button is not being pressed and the variable is set
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 0 && flag){
 800024a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800024e:	480d      	ldr	r0, [pc, #52]	@ (8000284 <main+0x4c>)
 8000250:	f000 fa56 	bl	8000700 <HAL_GPIO_ReadPin>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d109      	bne.n	800026e <main+0x36>
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d006      	beq.n	800026e <main+0x36>
			// toggle the led
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000260:	2180      	movs	r1, #128	@ 0x80
 8000262:	4809      	ldr	r0, [pc, #36]	@ (8000288 <main+0x50>)
 8000264:	f000 fa64 	bl	8000730 <HAL_GPIO_TogglePin>
			// reset the flag
			flag=false;
 8000268:	2300      	movs	r3, #0
 800026a:	71fb      	strb	r3, [r7, #7]
 800026c:	e009      	b.n	8000282 <main+0x4a>
		}
		else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 1){
 800026e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000272:	4804      	ldr	r0, [pc, #16]	@ (8000284 <main+0x4c>)
 8000274:	f000 fa44 	bl	8000700 <HAL_GPIO_ReadPin>
 8000278:	4603      	mov	r3, r0
 800027a:	2b01      	cmp	r3, #1
 800027c:	d1e5      	bne.n	800024a <main+0x12>
			flag = true;
 800027e:	2301      	movs	r3, #1
 8000280:	71fb      	strb	r3, [r7, #7]
		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 0 && flag){
 8000282:	e7e2      	b.n	800024a <main+0x12>
 8000284:	40020800 	.word	0x40020800
 8000288:	40020400 	.word	0x40020400

0800028c <GPIOB_Config>:
		}
	}
}

// GPIOB configuration for LED 2
void GPIOB_Config(void){
 800028c:	b580      	push	{r7, lr}
 800028e:	b086      	sub	sp, #24
 8000290:	af00      	add	r7, sp, #0
	// enable the clock to bring the GPIO B connectors up from their low power default state
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000292:	4b10      	ldr	r3, [pc, #64]	@ (80002d4 <GPIOB_Config+0x48>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000296:	4a0f      	ldr	r2, [pc, #60]	@ (80002d4 <GPIOB_Config+0x48>)
 8000298:	f043 0302 	orr.w	r3, r3, #2
 800029c:	6313      	str	r3, [r2, #48]	@ 0x30
 800029e:	4b0d      	ldr	r3, [pc, #52]	@ (80002d4 <GPIOB_Config+0x48>)
 80002a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a2:	f003 0302 	and.w	r3, r3, #2
 80002a6:	603b      	str	r3, [r7, #0]
 80002a8:	683b      	ldr	r3, [r7, #0]
	// initialize a struct to hold all the values for our GPIO device
	GPIO_InitTypeDef GPIOB_Init= {};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	611a      	str	r2, [r3, #16]
	// set the pin to 7, since that's where our LED2 is connected
	GPIOB_Init.Pin = GPIO_PIN_7;
 80002b8:	2380      	movs	r3, #128	@ 0x80
 80002ba:	607b      	str	r3, [r7, #4]
	// set the pin to the output push-pull mode
	GPIOB_Init.Mode = GPIO_MODE_OUTPUT_PP;
 80002bc:	2301      	movs	r3, #1
 80002be:	60bb      	str	r3, [r7, #8]
	// call the initialization function with this struct for GPIO B
	HAL_GPIO_Init(GPIOB, &GPIOB_Init);
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4619      	mov	r1, r3
 80002c4:	4804      	ldr	r0, [pc, #16]	@ (80002d8 <GPIOB_Config+0x4c>)
 80002c6:	f000 f86f 	bl	80003a8 <HAL_GPIO_Init>
}
 80002ca:	bf00      	nop
 80002cc:	3718      	adds	r7, #24
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020400 	.word	0x40020400

080002dc <GPIOC_Config>:

// GPIOB configuration for B1
void GPIOC_Config(void){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af00      	add	r7, sp, #0
	// enable the clock to bring the GPIO C connectors up from their low power default state
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002e2:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <GPIOC_Config+0x4c>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e6:	4a10      	ldr	r2, [pc, #64]	@ (8000328 <GPIOC_Config+0x4c>)
 80002e8:	f043 0304 	orr.w	r3, r3, #4
 80002ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80002ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000328 <GPIOC_Config+0x4c>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f2:	f003 0304 	and.w	r3, r3, #4
 80002f6:	603b      	str	r3, [r7, #0]
 80002f8:	683b      	ldr	r3, [r7, #0]
	// initialize a struct to hold all the values for our GPIO device
	GPIO_InitTypeDef GPIOC_Init= {};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
	// set the pin to 13, since that's where our user button B1 is connected
	GPIOC_Init.Pin = GPIO_PIN_13;
 8000308:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800030c:	607b      	str	r3, [r7, #4]
	// set the pin to the input mode
	GPIOC_Init.Mode = GPIO_MODE_INPUT;
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
	// the button already has the hardware for pull up, so we need no pull in software
	GPIOC_Init.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
	// call the initialization function with this struct for GPIO C
	HAL_GPIO_Init(GPIOC, &GPIOC_Init);
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4619      	mov	r1, r3
 800031a:	4804      	ldr	r0, [pc, #16]	@ (800032c <GPIOC_Config+0x50>)
 800031c:	f000 f844 	bl	80003a8 <HAL_GPIO_Init>
}
 8000320:	bf00      	nop
 8000322:	3718      	adds	r7, #24
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40023800 	.word	0x40023800
 800032c:	40020800 	.word	0x40020800

08000330 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000334:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <SystemInit+0x20>)
 8000336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800033a:	4a05      	ldr	r2, [pc, #20]	@ (8000350 <SystemInit+0x20>)
 800033c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000340:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000354:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800038c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000358:	f7ff ffea 	bl	8000330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	@ (8000390 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	@ (8000394 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	@ (8000398 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	@ (800039c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	@ (80003a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000382:	f000 f9ef 	bl	8000764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000386:	f7ff ff57 	bl	8000238 <main>
  bx  lr    
 800038a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800038c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000398:	080007cc 	.word	0x080007cc
  ldr r2, =_sbss
 800039c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a0:	2000001c 	.word	0x2000001c

080003a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b089      	sub	sp, #36	@ 0x24
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80003ba:	2300      	movs	r3, #0
 80003bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80003be:	2300      	movs	r3, #0
 80003c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
 80003c6:	e175      	b.n	80006b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80003c8:	2201      	movs	r2, #1
 80003ca:	69fb      	ldr	r3, [r7, #28]
 80003cc:	fa02 f303 	lsl.w	r3, r2, r3
 80003d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	697a      	ldr	r2, [r7, #20]
 80003d8:	4013      	ands	r3, r2
 80003da:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80003dc:	693a      	ldr	r2, [r7, #16]
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	f040 8164 	bne.w	80006ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	f003 0303 	and.w	r3, r3, #3
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d005      	beq.n	80003fe <HAL_GPIO_Init+0x56>
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	f003 0303 	and.w	r3, r3, #3
 80003fa:	2b02      	cmp	r3, #2
 80003fc:	d130      	bne.n	8000460 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	689b      	ldr	r3, [r3, #8]
 8000402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000404:	69fb      	ldr	r3, [r7, #28]
 8000406:	005b      	lsls	r3, r3, #1
 8000408:	2203      	movs	r2, #3
 800040a:	fa02 f303 	lsl.w	r3, r2, r3
 800040e:	43db      	mvns	r3, r3
 8000410:	69ba      	ldr	r2, [r7, #24]
 8000412:	4013      	ands	r3, r2
 8000414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	68da      	ldr	r2, [r3, #12]
 800041a:	69fb      	ldr	r3, [r7, #28]
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	fa02 f303 	lsl.w	r3, r2, r3
 8000422:	69ba      	ldr	r2, [r7, #24]
 8000424:	4313      	orrs	r3, r2
 8000426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	69ba      	ldr	r2, [r7, #24]
 800042c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000434:	2201      	movs	r2, #1
 8000436:	69fb      	ldr	r3, [r7, #28]
 8000438:	fa02 f303 	lsl.w	r3, r2, r3
 800043c:	43db      	mvns	r3, r3
 800043e:	69ba      	ldr	r2, [r7, #24]
 8000440:	4013      	ands	r3, r2
 8000442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	091b      	lsrs	r3, r3, #4
 800044a:	f003 0201 	and.w	r2, r3, #1
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	fa02 f303 	lsl.w	r3, r2, r3
 8000454:	69ba      	ldr	r2, [r7, #24]
 8000456:	4313      	orrs	r3, r2
 8000458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	69ba      	ldr	r2, [r7, #24]
 800045e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	f003 0303 	and.w	r3, r3, #3
 8000468:	2b03      	cmp	r3, #3
 800046a:	d017      	beq.n	800049c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000472:	69fb      	ldr	r3, [r7, #28]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	2203      	movs	r2, #3
 8000478:	fa02 f303 	lsl.w	r3, r2, r3
 800047c:	43db      	mvns	r3, r3
 800047e:	69ba      	ldr	r2, [r7, #24]
 8000480:	4013      	ands	r3, r2
 8000482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	689a      	ldr	r2, [r3, #8]
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	fa02 f303 	lsl.w	r3, r2, r3
 8000490:	69ba      	ldr	r2, [r7, #24]
 8000492:	4313      	orrs	r3, r2
 8000494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	f003 0303 	and.w	r3, r3, #3
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d123      	bne.n	80004f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80004a8:	69fb      	ldr	r3, [r7, #28]
 80004aa:	08da      	lsrs	r2, r3, #3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	3208      	adds	r2, #8
 80004b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80004b6:	69fb      	ldr	r3, [r7, #28]
 80004b8:	f003 0307 	and.w	r3, r3, #7
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	220f      	movs	r2, #15
 80004c0:	fa02 f303 	lsl.w	r3, r2, r3
 80004c4:	43db      	mvns	r3, r3
 80004c6:	69ba      	ldr	r2, [r7, #24]
 80004c8:	4013      	ands	r3, r2
 80004ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	691a      	ldr	r2, [r3, #16]
 80004d0:	69fb      	ldr	r3, [r7, #28]
 80004d2:	f003 0307 	and.w	r3, r3, #7
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	fa02 f303 	lsl.w	r3, r2, r3
 80004dc:	69ba      	ldr	r2, [r7, #24]
 80004de:	4313      	orrs	r3, r2
 80004e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80004e2:	69fb      	ldr	r3, [r7, #28]
 80004e4:	08da      	lsrs	r2, r3, #3
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	3208      	adds	r2, #8
 80004ea:	69b9      	ldr	r1, [r7, #24]
 80004ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80004f6:	69fb      	ldr	r3, [r7, #28]
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	2203      	movs	r2, #3
 80004fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	69ba      	ldr	r2, [r7, #24]
 8000504:	4013      	ands	r3, r2
 8000506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	f003 0203 	and.w	r2, r3, #3
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	69ba      	ldr	r2, [r7, #24]
 800051a:	4313      	orrs	r3, r2
 800051c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	69ba      	ldr	r2, [r7, #24]
 8000522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800052c:	2b00      	cmp	r3, #0
 800052e:	f000 80be 	beq.w	80006ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000532:	4b66      	ldr	r3, [pc, #408]	@ (80006cc <HAL_GPIO_Init+0x324>)
 8000534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000536:	4a65      	ldr	r2, [pc, #404]	@ (80006cc <HAL_GPIO_Init+0x324>)
 8000538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800053c:	6453      	str	r3, [r2, #68]	@ 0x44
 800053e:	4b63      	ldr	r3, [pc, #396]	@ (80006cc <HAL_GPIO_Init+0x324>)
 8000540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800054a:	4a61      	ldr	r2, [pc, #388]	@ (80006d0 <HAL_GPIO_Init+0x328>)
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	089b      	lsrs	r3, r3, #2
 8000550:	3302      	adds	r3, #2
 8000552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000556:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	f003 0303 	and.w	r3, r3, #3
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	220f      	movs	r2, #15
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	43db      	mvns	r3, r3
 8000568:	69ba      	ldr	r2, [r7, #24]
 800056a:	4013      	ands	r3, r2
 800056c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a58      	ldr	r2, [pc, #352]	@ (80006d4 <HAL_GPIO_Init+0x32c>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d037      	beq.n	80005e6 <HAL_GPIO_Init+0x23e>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4a57      	ldr	r2, [pc, #348]	@ (80006d8 <HAL_GPIO_Init+0x330>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d031      	beq.n	80005e2 <HAL_GPIO_Init+0x23a>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a56      	ldr	r2, [pc, #344]	@ (80006dc <HAL_GPIO_Init+0x334>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d02b      	beq.n	80005de <HAL_GPIO_Init+0x236>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a55      	ldr	r2, [pc, #340]	@ (80006e0 <HAL_GPIO_Init+0x338>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d025      	beq.n	80005da <HAL_GPIO_Init+0x232>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4a54      	ldr	r2, [pc, #336]	@ (80006e4 <HAL_GPIO_Init+0x33c>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d01f      	beq.n	80005d6 <HAL_GPIO_Init+0x22e>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a53      	ldr	r2, [pc, #332]	@ (80006e8 <HAL_GPIO_Init+0x340>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d019      	beq.n	80005d2 <HAL_GPIO_Init+0x22a>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a52      	ldr	r2, [pc, #328]	@ (80006ec <HAL_GPIO_Init+0x344>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d013      	beq.n	80005ce <HAL_GPIO_Init+0x226>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a51      	ldr	r2, [pc, #324]	@ (80006f0 <HAL_GPIO_Init+0x348>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d00d      	beq.n	80005ca <HAL_GPIO_Init+0x222>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a50      	ldr	r2, [pc, #320]	@ (80006f4 <HAL_GPIO_Init+0x34c>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d007      	beq.n	80005c6 <HAL_GPIO_Init+0x21e>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4a4f      	ldr	r2, [pc, #316]	@ (80006f8 <HAL_GPIO_Init+0x350>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d101      	bne.n	80005c2 <HAL_GPIO_Init+0x21a>
 80005be:	2309      	movs	r3, #9
 80005c0:	e012      	b.n	80005e8 <HAL_GPIO_Init+0x240>
 80005c2:	230a      	movs	r3, #10
 80005c4:	e010      	b.n	80005e8 <HAL_GPIO_Init+0x240>
 80005c6:	2308      	movs	r3, #8
 80005c8:	e00e      	b.n	80005e8 <HAL_GPIO_Init+0x240>
 80005ca:	2307      	movs	r3, #7
 80005cc:	e00c      	b.n	80005e8 <HAL_GPIO_Init+0x240>
 80005ce:	2306      	movs	r3, #6
 80005d0:	e00a      	b.n	80005e8 <HAL_GPIO_Init+0x240>
 80005d2:	2305      	movs	r3, #5
 80005d4:	e008      	b.n	80005e8 <HAL_GPIO_Init+0x240>
 80005d6:	2304      	movs	r3, #4
 80005d8:	e006      	b.n	80005e8 <HAL_GPIO_Init+0x240>
 80005da:	2303      	movs	r3, #3
 80005dc:	e004      	b.n	80005e8 <HAL_GPIO_Init+0x240>
 80005de:	2302      	movs	r3, #2
 80005e0:	e002      	b.n	80005e8 <HAL_GPIO_Init+0x240>
 80005e2:	2301      	movs	r3, #1
 80005e4:	e000      	b.n	80005e8 <HAL_GPIO_Init+0x240>
 80005e6:	2300      	movs	r3, #0
 80005e8:	69fa      	ldr	r2, [r7, #28]
 80005ea:	f002 0203 	and.w	r2, r2, #3
 80005ee:	0092      	lsls	r2, r2, #2
 80005f0:	4093      	lsls	r3, r2
 80005f2:	69ba      	ldr	r2, [r7, #24]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80005f8:	4935      	ldr	r1, [pc, #212]	@ (80006d0 <HAL_GPIO_Init+0x328>)
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	089b      	lsrs	r3, r3, #2
 80005fe:	3302      	adds	r3, #2
 8000600:	69ba      	ldr	r2, [r7, #24]
 8000602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000606:	4b3d      	ldr	r3, [pc, #244]	@ (80006fc <HAL_GPIO_Init+0x354>)
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800060c:	693b      	ldr	r3, [r7, #16]
 800060e:	43db      	mvns	r3, r3
 8000610:	69ba      	ldr	r2, [r7, #24]
 8000612:	4013      	ands	r3, r2
 8000614:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d003      	beq.n	800062a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000622:	69ba      	ldr	r2, [r7, #24]
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	4313      	orrs	r3, r2
 8000628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800062a:	4a34      	ldr	r2, [pc, #208]	@ (80006fc <HAL_GPIO_Init+0x354>)
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000630:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <HAL_GPIO_Init+0x354>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	43db      	mvns	r3, r3
 800063a:	69ba      	ldr	r2, [r7, #24]
 800063c:	4013      	ands	r3, r2
 800063e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800064c:	69ba      	ldr	r2, [r7, #24]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	4313      	orrs	r3, r2
 8000652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000654:	4a29      	ldr	r2, [pc, #164]	@ (80006fc <HAL_GPIO_Init+0x354>)
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800065a:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <HAL_GPIO_Init+0x354>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	43db      	mvns	r3, r3
 8000664:	69ba      	ldr	r2, [r7, #24]
 8000666:	4013      	ands	r3, r2
 8000668:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000672:	2b00      	cmp	r3, #0
 8000674:	d003      	beq.n	800067e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000676:	69ba      	ldr	r2, [r7, #24]
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	4313      	orrs	r3, r2
 800067c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800067e:	4a1f      	ldr	r2, [pc, #124]	@ (80006fc <HAL_GPIO_Init+0x354>)
 8000680:	69bb      	ldr	r3, [r7, #24]
 8000682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000684:	4b1d      	ldr	r3, [pc, #116]	@ (80006fc <HAL_GPIO_Init+0x354>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	43db      	mvns	r3, r3
 800068e:	69ba      	ldr	r2, [r7, #24]
 8000690:	4013      	ands	r3, r2
 8000692:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800069c:	2b00      	cmp	r3, #0
 800069e:	d003      	beq.n	80006a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80006a0:	69ba      	ldr	r2, [r7, #24]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80006a8:	4a14      	ldr	r2, [pc, #80]	@ (80006fc <HAL_GPIO_Init+0x354>)
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3301      	adds	r3, #1
 80006b2:	61fb      	str	r3, [r7, #28]
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	2b0f      	cmp	r3, #15
 80006b8:	f67f ae86 	bls.w	80003c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3724      	adds	r7, #36	@ 0x24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40013800 	.word	0x40013800
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40020400 	.word	0x40020400
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40021400 	.word	0x40021400
 80006ec:	40021800 	.word	0x40021800
 80006f0:	40021c00 	.word	0x40021c00
 80006f4:	40022000 	.word	0x40022000
 80006f8:	40022400 	.word	0x40022400
 80006fc:	40013c00 	.word	0x40013c00

08000700 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	691a      	ldr	r2, [r3, #16]
 8000710:	887b      	ldrh	r3, [r7, #2]
 8000712:	4013      	ands	r3, r2
 8000714:	2b00      	cmp	r3, #0
 8000716:	d002      	beq.n	800071e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
 800071c:	e001      	b.n	8000722 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000722:	7bfb      	ldrb	r3, [r7, #15]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000742:	887a      	ldrh	r2, [r7, #2]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4013      	ands	r3, r2
 8000748:	041a      	lsls	r2, r3, #16
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	43d9      	mvns	r1, r3
 800074e:	887b      	ldrh	r3, [r7, #2]
 8000750:	400b      	ands	r3, r1
 8000752:	431a      	orrs	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	619a      	str	r2, [r3, #24]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <__libc_init_array>:
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	4d0d      	ldr	r5, [pc, #52]	@ (800079c <__libc_init_array+0x38>)
 8000768:	4c0d      	ldr	r4, [pc, #52]	@ (80007a0 <__libc_init_array+0x3c>)
 800076a:	1b64      	subs	r4, r4, r5
 800076c:	10a4      	asrs	r4, r4, #2
 800076e:	2600      	movs	r6, #0
 8000770:	42a6      	cmp	r6, r4
 8000772:	d109      	bne.n	8000788 <__libc_init_array+0x24>
 8000774:	4d0b      	ldr	r5, [pc, #44]	@ (80007a4 <__libc_init_array+0x40>)
 8000776:	4c0c      	ldr	r4, [pc, #48]	@ (80007a8 <__libc_init_array+0x44>)
 8000778:	f000 f818 	bl	80007ac <_init>
 800077c:	1b64      	subs	r4, r4, r5
 800077e:	10a4      	asrs	r4, r4, #2
 8000780:	2600      	movs	r6, #0
 8000782:	42a6      	cmp	r6, r4
 8000784:	d105      	bne.n	8000792 <__libc_init_array+0x2e>
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f855 3b04 	ldr.w	r3, [r5], #4
 800078c:	4798      	blx	r3
 800078e:	3601      	adds	r6, #1
 8000790:	e7ee      	b.n	8000770 <__libc_init_array+0xc>
 8000792:	f855 3b04 	ldr.w	r3, [r5], #4
 8000796:	4798      	blx	r3
 8000798:	3601      	adds	r6, #1
 800079a:	e7f2      	b.n	8000782 <__libc_init_array+0x1e>
 800079c:	080007c4 	.word	0x080007c4
 80007a0:	080007c4 	.word	0x080007c4
 80007a4:	080007c4 	.word	0x080007c4
 80007a8:	080007c8 	.word	0x080007c8

080007ac <_init>:
 80007ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ae:	bf00      	nop
 80007b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007b2:	bc08      	pop	{r3}
 80007b4:	469e      	mov	lr, r3
 80007b6:	4770      	bx	lr

080007b8 <_fini>:
 80007b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ba:	bf00      	nop
 80007bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007be:	bc08      	pop	{r3}
 80007c0:	469e      	mov	lr, r3
 80007c2:	4770      	bx	lr
